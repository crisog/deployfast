---
import Layout from '../../../layouts/Layout.astro';
import { getHostingOptionsForFramework } from '../../../frameworks.ts';
import { getCollection } from 'astro:content';

// Get params from URL
const { framework, resource: resourceId } = Astro.params;

if (!framework || !resourceId) {
  return Astro.redirect('/?error=missing-params');
}

let frameworkConfig;
let deploymentResource;
let mdxEntry;
let Content = null;
let rawMarkdown = '';

try {
  frameworkConfig = getHostingOptionsForFramework(framework);
  deploymentResource = frameworkConfig.deploymentResources.find(r => r.id === resourceId);

  if (!deploymentResource) {
    return Astro.redirect(`/deploy/${framework}?error=resource-not-found`);
  }

  // Load MDX content
  const allDeploymentContent = await getCollection('deployment');
  const mdxSlug = `${framework}-${resourceId}`;
  mdxEntry = allDeploymentContent.find((entry: any) => entry.slug === mdxSlug);

  if (mdxEntry) {
    const rendered = await mdxEntry.render();
    Content = rendered.Content;
    rawMarkdown = mdxEntry.body;
  } else {
    console.warn(`MDX content not found for ${mdxSlug}`);
  }
} catch (error) {
  console.error('Error loading content:', error);
  return Astro.redirect('/?error=invalid-framework');
}
---

<Layout>
  <div class="min-h-screen">
    <nav class="pt-6">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center min-h-16 py-2">
          <div class="flex items-center space-x-2 sm:space-x-4 flex-wrap text-sm sm:text-base">
            <a href="/" class="text-lg sm:text-xl font-bold text-light hover:text-gray-light transition-colors">
              DeployFast
            </a>
            <span class="text-gray-medium">/</span>
            <a href={`/deploy/${framework}`} class="text-gray-light hover:text-light transition-colors truncate max-w-[100px] sm:max-w-none">
              {frameworkConfig.name}
            </a>
            <span class="text-gray-medium">/</span>
            <span class="text-light truncate max-w-[120px] sm:max-w-none">
              <span class="sm:hidden">{deploymentResource.type === 'dockerfile' ? 'Dockerfile' : deploymentResource.type === 'guide' ? 'Guide' : deploymentResource.title}</span>
              <span class="hidden sm:inline">{deploymentResource.title}</span>
            </span>
          </div>
          <div class="flex items-center space-x-2 sm:space-x-4 flex-shrink-0">
            <a
              href="https://github.com/crisog/deployfast"
              class="text-gray-light hover:text-light transition-colors flex items-center space-x-2"
            >
              <img src="/github-mark-white.svg" alt="GitHub" class="w-5 h-5" />
              <span class="hidden md:inline">crisog/deployfast</span>
            </a>
          </div>
        </div>
      </div>
    </nav>

    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 pt-8 sm:pt-12 pb-12 sm:pb-16">
      <div class="mb-6 sm:mb-8">
        <div class="flex items-center space-x-2 sm:space-x-3 mb-3 sm:mb-4">
          <span class="text-2xl sm:text-3xl flex-shrink-0">
            {deploymentResource.type === 'dockerfile' ? 'üê≥' : deploymentResource.type === 'guide' ? 'üìñ' : '‚öôÔ∏è'}
          </span>
          <h1 class="text-2xl sm:text-3xl lg:text-4xl font-bold text-light break-words">
            {deploymentResource.title}
          </h1>
        </div>
        <p class="text-base sm:text-lg lg:text-xl text-gray-light">
          {deploymentResource.description}
        </p>
        {deploymentResource.filename && (
          <div class="mt-3 sm:mt-4">
            <span class="inline-flex items-center px-3 py-1 rounded-md bg-gray-dark text-gray-light font-mono text-xs sm:text-sm break-all">
              üìÑ {deploymentResource.filename}
            </span>
          </div>
        )}
      </div>

      <div class="rounded-lg border border-gray-medium overflow-hidden">
        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-4 p-4 sm:p-6 border-b border-gray-medium">
          <h2 class="text-lg sm:text-xl font-bold text-light">Resource Content</h2>
          <button
            id="copyButton"
            class="px-4 py-2 bg-gray-dark border border-gray-medium text-light rounded font-mono text-xs sm:text-sm hover:bg-gray-medium hover:border-light transition-colors whitespace-nowrap cursor-pointer"
          >
            Copy to Clipboard
          </button>
        </div>

        <div class="p-4 sm:p-6">
          {Content ? (
            <div id="resourceContent" class="prose prose-invert max-w-none">
              <Content />
            </div>
          ) : (
            <div id="resourceContent" class="prose prose-invert max-w-none">
              <p class="text-gray-light font-mono">
                üìÑ MDX content not found for: <code class="text-blue-medium">{framework}-{resourceId}</code>
              </p>
              <p class="text-gray-light font-mono mt-4">
                Expected content path: <code class="text-blue-medium">{deploymentResource.mdxPath}</code>
              </p>
            </div>
          )}
        </div>
      </div>

      <div class="mt-8 sm:mt-12 text-center">
        <a
          href={`/deploy/${framework}`}
          class="inline-flex items-center px-4 sm:px-6 py-2 sm:py-3 border border-light text-light hover:text-black hover:bg-light transition-colors rounded font-mono text-sm sm:text-base tracking-wide"
        >
          ‚Üê Back to {frameworkConfig.name} Resources
        </a>
      </div>
    </div>
  </div>

  <script define:vars={{ rawMarkdown }}>
    document.addEventListener('DOMContentLoaded', () => {
      const button = document.getElementById('copyButton');

      if (!button) return;

      button.addEventListener('click', () => {
        if (!rawMarkdown || rawMarkdown.length === 0) {
          button.textContent = '‚úó No content';
          setTimeout(() => {
            button.textContent = 'Copy to Clipboard';
          }, 2000);
          return;
        }

        navigator.clipboard.writeText(rawMarkdown).then(() => {
          const originalText = button.textContent;
          button.textContent = '‚úì Copied!';
          button.classList.add('bg-green-900', 'border-green-700');
          button.classList.remove('bg-gray-dark', 'border-gray-medium');

          setTimeout(() => {
            button.textContent = originalText;
            button.classList.remove('bg-green-900', 'border-green-700');
            button.classList.add('bg-gray-dark', 'border-gray-medium');
          }, 2000);
        }).catch(err => {
          console.error('Failed to copy:', err);
          button.textContent = '‚úó Failed';
          setTimeout(() => {
            button.textContent = 'Copy to Clipboard';
          }, 2000);
        });
      });
    });
  </script>
</Layout>